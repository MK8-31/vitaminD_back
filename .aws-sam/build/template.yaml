Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /register:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserRegisterFunction.Arn}/invocations
              responses: {}
          /ranking/{groupName}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRankingListFunction.Arn}/invocations
              responses: {}
          /delete/{userName}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserDeleteFunction.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  userGroup:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: userName
        AttributeType: S
      - AttributeName: groupName
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: userName
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
      - IndexName: GSI-groupName
        KeySchema:
        - AttributeName: groupName
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  UserDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UserDeleteFunction
      CodeUri: UserDeleteFunction
      Handler: main
      Runtime: go1.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERGROUP_TABLE_NAME:
            Ref: userGroup
          USERGROUP_TABLE_ARN:
            Fn::GetAtt:
            - userGroup
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: userGroup
      Events:
        ApiDELETEdeleteuserName:
          Type: Api
          Properties:
            Path: /delete/{userName}
            Method: DELETE
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: UserDeleteFunction
  UserDeleteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserDeleteFunction}
  UserRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UserRegisterFunction
      CodeUri: UserRegisterFunction
      Handler: main
      Runtime: go1.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERGROUP_TABLE_NAME:
            Ref: userGroup
          USERGROUP_TABLE_ARN:
            Fn::GetAtt:
            - userGroup
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: userGroup
      Events:
        ApiPOSTregister:
          Type: Api
          Properties:
            Path: /register
            Method: POST
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: UserRegisterFunction
  UserRegisterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserRegisterFunction}
  GetRankingListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetRankingListFunction
      CodeUri: GetRankingListFunction
      Handler: main
      Runtime: go1.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERGROUP_TABLE_NAME:
            Ref: userGroup
          USERGROUP_TABLE_ARN:
            Fn::GetAtt:
            - userGroup
            - Arn
          ENV: prod
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: userGroup
      Events:
        ApiGETrankinggroupName:
          Type: Api
          Properties:
            Path: /ranking/{groupName}
            Method: GET
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: GetRankingListFunction
  GetRankingListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetRankingListFunction}
